// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //Not(in= ,out= );
    Not(in=instruction[15] ,out=outnot );
    Mux16(a=aluout ,b=instruction ,sel=outnot ,out=mux1out );

    And(a=instruction[15] ,b=instruction[5] ,out=outandareg );
    Or(a=outnot ,b=outandareg ,out=loadareg );
    ARegister(in=mux1out ,load=loadareg ,out=aregisterout, out[0..14]=addressM ); 

    And(a=instruction[15] ,b=instruction[4] ,out=outanddreg );
    DRegister(in=aluout ,load=outanddreg ,out=dregisterout );   

    And(a=instruction[15] ,b=instruction[15] ,out=outand1 );
    And(a=outand1 ,b=instruction[12] ,out=outand2 );
    Mux16(a=aregisterout ,b=inM ,sel=outand2 ,out=mux2out ); 

    And(a=outand1 ,b=instruction[6] ,out=c6 );
    And(a=outand1 ,b=instruction[7] ,out=c5 );
    And(a=outand1 ,b=instruction[8] ,out=c4 );
    And(a=outand1 ,b=instruction[9] ,out=c3 );
    And(a=outand1 ,b=instruction[10] ,out=c2 );
    And(a=outand1 ,b=instruction[11] ,out=c1 );
    ALU(x=dregisterout ,y=mux2out ,zx=c1  ,nx=c2  ,zy=c3 ,ny=c4 ,f=c5 ,no=c6 ,out=aluout, out=outM ,zr=zr ,ng=ng );

    And(a=instruction[15] ,b=instruction[3] ,out=writeM );



    And(a=instruction[15] ,b=instruction[15] ,out=isinstruction );
    And(a=instruction[0] ,b=instruction[1] ,out=j1j2 );
    And(a=j1j2 ,b=instruction[2] ,out=j1j2j3 );
    And(a=isinstruction ,b=j1j2j3 ,out=loadpc1 );

    And(a=instruction[2] ,b=ng ,out=j1ng );
    And(a=j1ng ,b=isinstruction ,out=loadpc2 );

    And(a=instruction[1] ,b=zr ,out=j2zr );
    And(a=j2zr ,b=isinstruction ,out=loadpc3 );

    Not(in=ng ,out=notng );
    Not(in=zr ,out=notzr );
    And(a=notng ,b=notzr ,out=notnot );
    And(a=instruction[0] ,b=notnot ,out=j3nono );
    And(a=j3nono ,b=isinstruction ,out=loadpc4 );

    Or(a=loadpc1 ,b=loadpc2 ,out=or1 );
    Or(a=loadpc3 ,b=loadpc4 ,out=or2 );
    Or(a=or1 ,b=or2 ,out=loadpc );
    Not(in=loadpc ,out=outinc );

    PC(in=aregisterout ,load=loadpc ,inc=outinc ,reset=reset ,out[0..14]=pc );

}